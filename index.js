require('dotenv/config')

const {BOT_TOKEN} = process.env
const TelegramBot = require('node-telegram-bot-api');
const bot = new TelegramBot(BOT_TOKEN, {polling: true});
const commands = ['/start', '/generate', '/discord', '/forum', '/ip',]
const { responses1, responses2, responses3, servers}  = require('./responses.js')
const chatStates = {};
const requiredChannelId = '@showb1zdef';

console.log('Bot has been started...')

const firstNames = ["Amaterasu", "Sora", "Emperor", "Hiroshi", "Amethyst", "Playada", "Adaptive", "Rebellious", "Yamato", "Dagon", "Katsu", "Saint", "Chrome", "Manera", "Arata", "Phantom", "Mamora", "Shirou", "Infused", "Jeffrey", "Shadow", "Neri", "Nik"];
const lastNames = ["Edge", "Tatsuki", "Cartier", "Explorer", "Blacksimens", "Cult", "Castle", "Bennett", "Cho", "Northside", "Eternal", "Devilside", "Destruction", "Murasaki", "Violence", "Recovery", "Armano", "Takeda", "Soyama", "Hellwalker"];

async function isUserSubscribed(userId) {
    try {
      const chatMember = await bot.getChatMember(requiredChannelId, userId);
      return ['member', 'administrator', 'creator'].includes(chatMember.status);
    } catch (error) {
      if (error.response && error.response.statusCode === 400) {
        console.error('–û—à–∏–±–∫–∞ 400: –Ω–µ–≤–µ—Ä–Ω—ã–π user_id');
      } else {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      }
      return false;
    }
  }
  
  async function handleCommand(msg, callback) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
  
    if (await isUserSubscribed(userId)) {
      callback(msg);
    } else {
      bot.sendMessage(chatId, `–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª ${requiredChannelId} –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.`);
    }
  }
  
  
function generateNickname() {
    const randomFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];
    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];
    return `${randomFirstName}_${randomLastName}`;
}

function generatePassword(length) {
    const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+';
    let password = '';
    for(let i = 0; i < length; i++) {
        const randomIndex = Math.floor(Math.random() * charset.length);
        password += charset[randomIndex];
    }
    return password;
}

bot.onText(/\/start/, (msg) => handleCommand(msg, (msg) => {
    bot.sendMessage(msg.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ @showb1zdef –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, —Ñ–∏–∫—Å–æ–≤ –±–∞–≥–æ–≤ –∏ –ø—Ä–æ—á–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –æ –±–æ—Ç–µ. –¢–µ–ø–µ—Ä—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞.");
}));

bot.onText(/\/generate/, (msg) => handleCommand(msg, (msg) => {
    const nickname = generateNickname();
    bot.sendMessage(msg.chat.id, `ü§ñ –í–∞—à –Ω–∏–∫–Ω–µ–π–º: ${nickname}`);
}));

bot.onText(/\/password/, (msg) => handleCommand(msg, (msg) => {
    const passwordLength = 12;
    const password = generatePassword(passwordLength);
    bot.sendMessage(msg.chat.id, `üîê –í–∞—à –ø–∞—Ä–æ–ª—å –¥–ª—è –ª—é–±–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, –ø–æ–¥–æ–π–¥—ë—Ç –∏ –¥–ª—è –∞—Ä–∏–∑–æ–Ω—ã: ${password}`);
}));

bot.onText(/\/discord/, (msg) => handleCommand(msg, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, 'üé≠ –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç (–ò—Ö –≤—Å–µ–≥–æ 30).');
    chatStates[chatId] = 'waiting_for_number1';
}));

bot.onText(/\/forum/, (msg) => handleCommand(msg, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, 'üé≠ –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä, —Ñ–æ—Ä—É–º –∫–æ—Ç–æ—Ä–æ–≥–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç (–ò—Ö –≤—Å–µ–≥–æ 30).');
    chatStates[chatId] = 'waiting_for_number2';
}));

bot.onText(/\/servers/, (msg) => handleCommand(msg, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, 'üé≠ –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä, –∞–π–ø–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç');
    chatStates[chatId] = 'waiting_for_number3';
}));

bot.on('message', (msg) => {
    const chatId  = msg.chat.id;
    const text = msg.text;
    const userId = msg.from.id

    if(!commands.includes(text) && chatStates[chatId] === 'waiting_for_number1') {

        if(/^\d+$/.test(text)) {
            const value = parseInt(text, 10);
    
            if (value >= 1 && value <= 30) {
                const response = responses1[value];
                bot.sendMessage(chatId, response);
                delete chatStates[chatId];
            } else {
                bot.sendMessage(chatId, 'üò© –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –æ—Ç 1 –¥–æ 30, —Å –¥—Ä—É–≥–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π –ø–æ–∫–∞ —á—Ç–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
            }
    }
}
else if (!commands.includes(text) && chatStates[chatId] === 'waiting_for_number2') {
    if (/^\d+$/.test(text)) {
      const value = parseInt(text, 10);

      if (value >= 1 && value <= 30) {
        const response = responses2[value];
        if (response) {
          bot.sendMessage(chatId, response);
        } else {
          bot.sendMessage(chatId, '–û—Ç–≤–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }
        delete chatStates[chatId];
      } else {
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 30.');
      }
    } else {
      bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 30.');
    }
  }
else if (!commands.includes(text) && chatStates[chatId] === 'waiting_for_number3') {
    if (/^\d+$/.test(text)) {
        const value = parseInt(text, 10);

        if (value >= 1 && value <= 30) {
            const response = responses3[value];
            if(response) {
                bot.sendMessage(chatId, response);
                delete chatStates[chatId];
            } else {
                bot.sendMessage(chatId, '–û—Ç–≤–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            }
        } else {
            bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –æ—Ç 1 –¥–æ 30.');
            
        }
    } else {
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –æ—Ç 1 –¥–æ 30.');
    }
}
});
bot.on('polling_error', (error) => {
    console.error('Polling error:', error);
});
